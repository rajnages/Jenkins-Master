pipeline {
    agent any

    environment {
        PROJECT_DIR = "Java-App/demo (2)/demo"  // Define project directory
        GIT_URL = 'https://github.com/rajnages/Jenkins-Master.git'  // Define Git repository URL
    }

    tools {
        jdk 'java'        // Ensure the Java tool is properly configured in Jenkins
        maven 'maven'      // Ensure Maven is properly configured in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the repository
                git branch: 'main', url: GIT_URL
            }
        }

        stage('Build') {
            steps {
                script {
                    // Clean and compile the project using Maven
                    sh '''
                        cd "${PROJECT_DIR}"
                        mvn clean install
                    '''  // Quoted the path with spaces and parentheses
                }
            }
        }

        stage('Test') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        script {
                            // Run unit tests in parallel
                            sh 'mvn -T 1C test'  // Use 1 thread per CPU core
                        }
                    }
                }
                stage('Integration Tests') {
                    steps {
                        script {
                            // Run integration tests in parallel (if applicable)
                            sh 'mvn -T 1C verify'  // Adjust as necessary
                        }
                    }
                }
            }
        }

        stage('Package') {
            steps {
                script {
                    // Package the application (e.g., creating a .jar file)
                    sh 'mvn package'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Deploy the application (e.g., to a server, S3, or another environment)
                    echo "Deploying the application..."
                    // Example: sh 'scp target/your-app.jar user@server:/path/to/deploy'
                }
            }
        }
    }

    post {
        success {
            echo 'Build and deploy process completed successfully!'
        }
        failure {
            echo 'There was an issue with the build or deployment.'
        }
        always {
            // Clean up actions (e.g., archiving artifacts or sending notifications)
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
        }
    }
}