pipeline {
    agent any

    tools {
        nodejs 'node'
    }
    
    environment {
        // App Configuration
        APP_NAME = 'jenkins-sample-app'
        APP_PORT = '3000'
        
        // Docker Configuration
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        DOCKER_HUB_REPO = 'rajnages'
        DOCKER_IMAGE = "${DOCKER_HUB_REPO}/${APP_NAME}"
        DOCKER_TAG = "${BUILD_NUMBER}"
        GIT_TAG = sh(returnStdout: true, script: 'git describe --tags --abbrev=0 || echo latest').trim()
        
        // Build Configuration
        BUILD_TIMESTAMP = sh(returnStdout: true, script: 'date +%Y%m%d_%H%M%S').trim()
        NODE_ENV = 'production'
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    // Print Build Info
                    echo """
                    Building ${APP_NAME}
                    Branch: ${env.BRANCH_NAME}
                    Build Number: ${BUILD_NUMBER}
                    Git Tag: ${GIT_TAG}
                    Build Timestamp: ${BUILD_TIMESTAMP}
                    """
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build & Test') {
            parallel {
                stage('Install Dependencies') {
                    steps {
                        dir('app') {
                            script {
                                echo "Installing dependencies..."
                                sh 'npm ci --prefer-offline'  // Faster than npm install
                            }
                        }
                    }
                }
                
                stage('Security Scan') {
                    steps {
                        dir('app') {
                            script {
                                echo "Running security audit..."
                                sh 'npm audit || true'  // Don't fail build on audit issues
                            }
                        }
                    }
                }
            }
        }

        stage('Test & Quality') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        dir('app') {
                            script {
                                try {
                                    echo "Running unit tests..."
                                    sh 'npm test'
                                } catch (err) {
                                    unstable('Unit Tests failed')
                                }
                            }
                        }
                    }
                }
                
                stage('Lint Check') {
                    steps {
                        dir('app') {
                            script {
                                echo "Running lint check..."
                                sh 'npm run lint || true'  // Add lint script to package.json
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        // Build with cache optimization
                        def buildArgs = "-f Dockerfile . --no-cache=false --build-arg NODE_ENV=${NODE_ENV}"
                        
                        // Build images with different tags
                        docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", buildArgs)
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:${GIT_TAG}"
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                        
                        // Image security scan (optional)
                        sh 'docker scan ${DOCKER_IMAGE}:${DOCKER_TAG} || true'
                    }
                }
            }
        }

        stage('Push to Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        // Login with retry
                        retry(3) {
                            sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                        }
                        
                        // Push images with retry
                        retry(3) {
                            sh """
                                docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                                docker push ${DOCKER_IMAGE}:${GIT_TAG}
                                docker push ${DOCKER_IMAGE}:latest
                            """
                        }
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    try {
                        // Graceful shutdown of existing container
                        sh """
                            if docker ps -q --filter name=${APP_NAME}; then
                                echo 'Stopping existing container...'
                                docker stop ${APP_NAME} || true
                                docker rm ${APP_NAME} || true
                            fi
                        """
                        
                        // Deploy with health check
                        sh """
                            docker run -d \\
                                --name ${APP_NAME} \\
                                --restart unless-stopped \\
                                -p ${APP_PORT}:${APP_PORT} \\
                                -e NODE_ENV=${NODE_ENV} \\
                                --health-cmd='curl -f http://localhost:${APP_PORT} || exit 1' \\
                                --health-interval=30s \\
                                --health-timeout=10s \\
                                --health-retries=3 \\
                                ${DOCKER_IMAGE}:${GIT_TAG}
                        """
                        
                        // Wait for container to be healthy
                        sh """
                            echo 'Waiting for container to be healthy...'
                            timeout 30s bash -c 'until docker ps --filter name=${APP_NAME} --filter health=healthy -q; do sleep 2; done'
                        """
                    } catch (Exception e) {
                        error "Deployment failed: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Build successful! Application is running at http://localhost:${APP_PORT}"
        }
        failure {
            echo 'Build failed! Check logs for details'
        }
        always {
            script {
                // Cleanup Docker
                sh 'docker logout'
                
                // Cleanup images with error handling
                def imagesToClean = [
                    "${DOCKER_IMAGE}:${DOCKER_TAG}",
                    "${DOCKER_IMAGE}:${GIT_TAG}",
                    "${DOCKER_IMAGE}:latest"
                ]
                
                imagesToClean.each { image ->
                    try {
                        sh "docker rmi ${image} || true"
                    } catch (Exception e) {
                        echo "Warning: Failed to remove image ${image}: ${e.message}"
                    }
                }
                
                // Workspace Cleanup
                cleanWs(
                    cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true
                )
            }
        }
    }
}