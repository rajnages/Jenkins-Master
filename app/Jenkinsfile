pipeline {
    agent any

    tools {
        nodejs 'node'
    }
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        DOCKER_HUB_REPO = 'rajnages'
        DOCKER_IMAGE = 'jenkins-sample-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        GIT_TAG = sh(returnStdout: true, script: 'git describe --tags --abbrev=0 || echo latest').trim()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('app') {  // Change to app directory
                    sh 'npm install'
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('app') {  // Change to app directory
                    sh 'npm test'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('app') {  // Change to app directory
                    script {
                        // Build with both local and Docker Hub tags
                        docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f Dockerfile .")
                        docker.build("${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}", "-f Dockerfile .")
                        docker.build("${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:${GIT_TAG}", "-f Dockerfile .")
                        docker.build("${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:latest", "-f Dockerfile .")
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                    
                    // Push both tagged and latest versions
                    sh "docker push ${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sh "docker push ${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:${GIT_TAG}"
                    sh "docker push ${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:latest"
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    // Stop existing container if it exists
                    sh 'docker ps -q --filter name=jenkins-app | xargs -r docker stop'
                    sh 'docker ps -aq --filter name=jenkins-app | xargs -r docker rm'
                    
                    // Run new container using the Docker Hub image
                    sh "docker run -d --name jenkins-app -p 3000:3000 ${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:${GIT_TAG}"
                }
            }
        }
    }
    
    post {
        always {
            // Logout from Docker Hub
            sh 'docker logout'
        }
        cleanup {
            // Clean up old images to save space
            script {
                try {
                    sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sh "docker rmi ${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sh "docker rmi ${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:${GIT_TAG}"
                    sh "docker rmi ${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:latest"
                } catch (err) {
                    echo "Error cleaning up images: ${err}"
                }
            }
        }
    }
}